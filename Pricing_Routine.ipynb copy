{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"text-align: right\"> Amir Oskoui <br> Casey Tirshfield </div>\n",
    "<center> <h1>Final Project - IEOR 4735</h1> </center>\n",
    "<center> <h2>December 30, 2018</h2> </center>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objective"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our objective is to code a pricing routine for a derivative contract paying $(S_T-K)^+$ in USD at a pre-specified expiration date $T$, where $S_T$ is the price of STOXX50E denominated in EUR and K a given strike price in USD. The contract \"knocks-out\" if on a specified date $T_1<T$ the 3-month USD LIBOR is above a known barrier level $L^*$.\n",
    "\t\t\n",
    "We simulate: $$\\mathbb{E}^{\\mathbb{Q}^d}\\left[\\left.\\left(S_T-K\\right)^+\\cdot\\left(\\unicode{x1D7D9}_{L_{T_1-T_1+\\delta}<L^*}\\right)\\cdot \\left(e^{-\\int_t^T r du}\\right)\\right\\vert\\mathcal{F}_t\\right]$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Methodology"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We apply two-factor Monte Carlo to simulate:\n",
    "\t\\begin{equation*}\n",
    "\t\t\\begin{cases}\n",
    "\t\t    \\frac{dS}{S} = (r_f-\\rho_{SX}\\sigma_X\\sigma_S)dt+\\sigma_S dW^{\\mathbb{Q}^d} \\\\\n",
    "\t\t    dr_d = (\\Theta(t)-br)dt + \\sigma_r dZ^{\\mathbb{Q}^d}\n",
    "\t    \\end{cases}\n",
    "\t\\end{equation*}\n",
    "where:\n",
    "\n",
    "$r_f$: $\\:$is the constant foreign exchange rate <br>\n",
    "$\\rho_{SX}$: $\\:$ is the historic correlation of the stock and the foreign exchange rate <br>\n",
    "$\\sigma_X$: $\\:$ is the foreign exchange volatility <br>\n",
    "$\\sigma_S$: $\\:$ is the stock volatility. In the foreign currency, we will use a European option price to back out $\\sigma_S$ from Black Scholes i.e. we will obtain the implied volatility using a solver because, by Girsanov's theorem, changing measure does not change volatility. <br>\n",
    "$\\sigma_r$: $\\:$Assuming known caplet prices (which we will obtain from Bloomberg) we will use the equation for $c(t,T,K,S)$ found on page 386 of Bj$\\unicode{x00f6}$rk to back out $\\sigma_r$ same manner as $\\sigma_S$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Formulas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Hull-White Term Structure (24.48 in Bj$\\unicode{x00f6}$rk) $$p(t,T)=\\frac{p^*(0,T)}{p^*(0,t)}\\exp\\left\\{B(t,T)f^*(0,t)-\\frac{\\sigma^2}{4a}B^2(t,T)(1-e^{-2at})-B(t,T)r(t)\\right\\} $$\n",
    "\n",
    "\n",
    "2. Bond Options (24.9 in Bj$\\unicode{x00f6}$rk)\n",
    "\\begin{align*} c(t,T,K,S)&=p(t,S)N(d)-p(t,T)\\cdot K \\cdot N(d-\\sigma_p) \\end{align*}\n",
    "\n",
    "$\\hspace{1.5 em}$where,\n",
    "\n",
    "\\begin{align*} d&=\\frac{1}{\\sigma_p}\\mathrm{log}\\left\\{\\frac{p(t,S)}{p(t,T)K}\\right\\}+\\frac{1}{2}\\sigma_p, \\\\ \\sigma_p &= \\frac{1}{a} \\left\\{1-e^{-a(S-T)}\\right\\} \\cdot \\sqrt{\\frac{\\sigma^2}{2a}\\left\\{1-e^{-2a(T-t)}\\right\\}}\\end{align*}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calibration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "from math import log, sqrt, exp, pi, gamma\n",
    "from scipy.integrate import quad\n",
    "import scipy.stats as si\n",
    "from scipy.stats import norm\n",
    "from scipy.special import kv\n",
    "from scipy.optimize import fsolve\n",
    "from scipy import interpolate\n",
    "from scipy.interpolate import interp1d\n",
    "import pandas as pd\n",
    "from scipy.stats.distributions import norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observed Market Data Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\" Price an option using the Black-Scholes model.\n",
    "        a: mean rate of return can be set to 3% or something in that ballpark\n",
    "        r: domestic short rate observed at time t\n",
    "        t: observed time for bond\n",
    "        T: matuiry of bond\n",
    "        T_1: time at which LIBOR must be under L_star\n",
    "        L_star: LIBOR barrier level\n",
    "        B: One of the Affine term structure variables solved above\n",
    "        S: maturity of LIBOR\n",
    "        S_r: further maturity of caplet\n",
    "        f_star: observed forward rate from the market\n",
    "        P_T: observed bond price maturing at time T<S\n",
    "        P_t: observed bond price maturing at time t\n",
    "        K: domestic stock strike\n",
    "        K_c: caplet strike\n",
    "        \"\"\"\n",
    "a = 0.03\n",
    "r = 0.028\n",
    "T = 2.0\n",
    "T_1 = 1.0\n",
    "L_star = 0.1\n",
    "S = T_1 + (3/12)\n",
    "S_r = 2.0\n",
    "r_f = .028 #foreign interest\n",
    "K = 1.0\n",
    "K_c = 1.2\n",
    "## Barrier:\n",
    "p_t=.999\n",
    "\n",
    "c = 0.20     # Caplet price\n",
    "p_S = 0.95   # Bond price at time S\n",
    "p_T = 0.98   # Bond price at time T < S\n",
    "K = 1.2      # Strike\n",
    "\n",
    "SN = 3.00  # Option price\n",
    "S_0 = 18   # Spot\n",
    "T = 1.00   # Maturity\n",
    "K = 20     # Strike\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate $\\sigma_S$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Asset Volatility: 0.4978090595609679\n"
     ]
    }
   ],
   "source": [
    "def f(sig_s):\n",
    "    d1 = (log(S_0 / K) + (r + 0.5 * sig_s ** 2) * T) / (sig_s * sqrt(T))\n",
    "    d2 = d1 - sig_s * sqrt(T)\n",
    "    return si.norm.cdf(d1) * S_0 - K * exp(-r * T) * si.norm.cdf(d2) - SN\n",
    "\n",
    "# Numerically solve for volatility\n",
    "sig_s = fsolve(f, .01)\n",
    "print('Asset Volatility:', float(sig_s))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate $\\sigma_r$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Volatility: 0.048954859140369233\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/scipy/optimize/minpack.py:163: RuntimeWarning: The iteration is not making good progress, as measured by the \n",
      "  improvement from the last ten iterations.\n",
      "  warnings.warn(msg, RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "def g(sig_r):\n",
    "    sig_p = 1/a * (1 - exp(-a * (S-T))) * sqrt((sig_r**2)/(2*a) * (1 - exp(-2*a*T)))\n",
    "    d = 1/sig_p * log(p_S/(p_T*K_c)) + 1/2 * sig_p\n",
    "    return p_S * si.norm.cdf(d) - p_T * K * si.norm.cdf(d - sig_p) - c\n",
    "\n",
    "# Numerically solve for volatility\n",
    "sig_r = fsolve(g, .999)\n",
    "print('Volatility:', float(sig_r))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate $\\rho_{SX}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.random.random_sample(15)\n",
    "S = np.random.random_sample(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho = np.corrcoef(X,S)[0][1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpolation of Discount Factors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nplt.figure()\\nplt.plot(x, p, x, p_star, '--')\\nprint(len(p_star))\\n\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Import discount factors p(0,T) as a vector\n",
    "#p=csv.read()\n",
    "\n",
    "p = np.linspace(.999, .93, num=100, endpoint=True)\n",
    "x = np.linspace(0, T, len(p), endpoint=True)\n",
    "\n",
    "p_star = interp1d(x, p, kind='cubic')\n",
    "#p_star = interpolate.splrep(x, p)\n",
    "#No Smoothing:\n",
    "\n",
    "#p_star = list(interpolate.splrep(x, p, s=0))\n",
    "\n",
    "'''\n",
    "plt.figure()\n",
    "plt.plot(x, p, x, p_star, '--')\n",
    "print(len(p_star))\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Numerical 1st and 2nd Order Derivative of log of Discount Factors for Forward Rate and $\\Theta(t)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_star(T):\n",
    "    epsilon=.000001\n",
    "    f_star_T = (-log(p_star(np.array(T)))+log(p_star(np.array(T-epsilon))))/epsilon\n",
    "    #neg_logp = -log(p)\n",
    "    #f_star_T = interpolate.splev(x, neg_logp, der=1)\n",
    "   \n",
    "    return f_star_T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Theta(T):\n",
    "    epsilon = .000001\n",
    "    #f_star_dot = interpolate.splev(x, f_star(T), der=1)\n",
    "    f_star_dot = (f_star(T)-f_star(T-epsilon))/epsilon\n",
    "    g_dot = ((sig_r**2)/a)*exp(-a*T)\n",
    "    g = ((sig_r**2)/(2*a**2))*(1-exp(-a*T))**2\n",
    "    Theta = f_star_dot + g_dot + a*(f_star(T) + g)\n",
    "    return Theta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def B(t,T):\n",
    "        \"\"\" Price an option using the Black-Scholes model.\n",
    "        a: mean rate of return can be set to 3% or something in that ballpark\n",
    "        t: observed time for bond\n",
    "        T: Matuiry of Bond\n",
    "        \"\"\"\n",
    "        B = (1 - exp(-(a)*(T-t)))/(a)\n",
    "        \n",
    "        return B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hull-White Term Structure for Bond Price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p(t,T,r):\n",
    "        \"\"\" Price an option using the Black-Scholes model.\n",
    "        a: mean rate of return can be set to 3% or something in that ballpark\n",
    "        t: observed time for bond\n",
    "        T: Matuiry of Bond\n",
    "        B: One of the Affine term structure variables solved above\n",
    "        r: domestic short rate observed at time t\n",
    "        f_star: observed forward rate from the market\n",
    "        P_T: observed bond price maturing at time T\n",
    "        P_t: observed bond price maturing at time t\n",
    "        \"\"\"\n",
    "    \n",
    "        p = (p_T/p_t)*exp(B(t,T)*f_star(t) - ((sig_r**2)/(4*a))*(B(t,T)**2)*(1-exp(-2*a*t)) - B(t,T)*r)\n",
    "\n",
    "        return p"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Libor $L(t,T_1,S)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def L(t,T_1,S,r):\n",
    "    L = (p(t,T_1,r)-p(t,S,r)) / (p(t,S,r)*(S-T_1))\n",
    "    return L"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "T = 2\n",
    "T_1 = 1\n",
    "s= T_1 + (3/12)\n",
    "t=.01\n",
    "m1 = 100\n",
    "nSims = 10000\n",
    "dt = T_1 / m1\n",
    "dT = (T - T_1)/m1\n",
    "sig_x = .03\n",
    "a=.03\n",
    "S = np.zeros((2*m1+1, nSims))\n",
    "r = np.zeros((2*m1+1, nSims))\n",
    "S[0,:] = 100\n",
    "r[0,:] = 0.028\n",
    "RT = np.zeros((nSims))\n",
    "V = np.zeros((nSims))\n",
    "I= np.zeros((nSims))\n",
    "\n",
    "for n in range(nSims):\n",
    "    for i in range(1, m1):\n",
    "        Z_1 = np.random.normal(0, 1)\n",
    "        Z_2 = np.random.normal(0, 1)\n",
    "        S[i,n] = S[i-1,n] * exp((r_f-rho*sig_x*sig_s-1/2*sig_s**2) * dt + sig_s * sqrt(dt) * Z_1)\n",
    "        r[i,n] = r[i-1,n] + (Theta(t) - B(t, T) * r[i-1, n]) * dt + sig_r * sqrt(dt) * Z_2\n",
    "    if L(T_1,T_1,s, r[m1,n]) > L_star:\n",
    "        I[n]=0\n",
    "    else:\n",
    "        I[n]=1\n",
    "    for i in range(m1+1, 2*m1+1):\n",
    "        Z_1 = np.random.normal(0, 1)\n",
    "        Z_2 = np.random.normal(0, 1)\n",
    "        S[i,n] = S[i-1,n] * exp((r_f-rho*sig_x*sig_s-1/2*sig_s**2) * dT + sig_s * sqrt(dT) * Z_1)\n",
    "        r[i,n] = r[i-1,n] + (Theta(t) - B(t, T) * r[i-1, n]) * dT + sig_r * sqrt(dT) * Z_2\n",
    "    for i in range(1,m1):\n",
    "        RT[n]= RT[n] + (r[i,n] -r[i-1,n])*dt\n",
    "    for i in range(m1+1,2*m1+1):\n",
    "        RT[n]= RT[n] + (r[i,n] -r[i-1,n])*dT\n",
    "    V[n] = I[n]*max(S[2*m1,n]-K,0)*exp(-RT[n])\n",
    "    \n",
    "V_hat = np.mean(V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "print(V_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
